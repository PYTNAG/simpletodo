// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: list.sql

package db

import (
	"context"
)

const addList = `-- name: AddList :one
INSERT INTO lists (
	author, header
) VALUES (
	$1, $2
) RETURNING id, author, header
`

type AddListParams struct {
	Author int32  `json:"author"`
	Header string `json:"header"`
}

func (q *Queries) AddList(ctx context.Context, arg AddListParams) (List, error) {
	row := q.db.QueryRowContext(ctx, addList, arg.Author, arg.Header)
	var i List
	err := row.Scan(&i.ID, &i.Author, &i.Header)
	return i, err
}

const deleteList = `-- name: DeleteList :exec
DELETE FROM lists
WHERE id = $1
`

func (q *Queries) DeleteList(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteList, id)
	return err
}

const getLists = `-- name: GetLists :many
SELECT id, header FROM lists
WHERE author = $1
`

type GetListsRow struct {
	ID     int32  `json:"id"`
	Header string `json:"header"`
}

func (q *Queries) GetLists(ctx context.Context, author int32) ([]GetListsRow, error) {
	rows, err := q.db.QueryContext(ctx, getLists, author)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetListsRow{}
	for rows.Next() {
		var i GetListsRow
		if err := rows.Scan(&i.ID, &i.Header); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
