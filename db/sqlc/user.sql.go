// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user.sql

package db

import (
	"context"
)

const addUser = `-- name: AddUser :one
INSERT INTO users (
	username, hash
) VALUES (
	$1, $2
) RETURNING id, username, hash
`

type AddUserParams struct {
	Username string `json:"username"`
	Hash     []byte `json:"hash"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, addUser, arg.Username, arg.Hash)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Hash)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1 AND hash = $2
`

type DeleteUserParams struct {
	ID   int32  `json:"id"`
	Hash []byte `json:"hash"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteUser, arg.ID, arg.Hash)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username FROM users
WHERE username = $1 AND hash = $2 LIMIT 1
`

type GetUserParams struct {
	Username string `json:"username"`
	Hash     []byte `json:"hash"`
}

type GetUserRow struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, arg.Username, arg.Hash)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const rehashUser = `-- name: RehashUser :one
UPDATE users
	set hash = $2
WHERE id = $1
RETURNING id, username, hash
`

type RehashUserParams struct {
	ID   int32  `json:"id"`
	Hash []byte `json:"hash"`
}

func (q *Queries) RehashUser(ctx context.Context, arg RehashUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, rehashUser, arg.ID, arg.Hash)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Hash)
	return i, err
}
