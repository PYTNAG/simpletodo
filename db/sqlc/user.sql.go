// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
	username, 
	hash
) VALUES (
	$1, $2
) RETURNING id, username, hash
`

type CreateUserParams struct {
	Username string `json:"username"`
	Hash     []byte `json:"hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Hash)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Hash)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE id = $1
RETURNING id, username
`

type DeleteUserRow struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) DeleteUser(ctx context.Context, id int32) (DeleteUserRow, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var i DeleteUserRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, hash FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Hash)
	return i, err
}

const rehashUser = `-- name: RehashUser :one
UPDATE users
	set hash = $2
WHERE id = $1 and hash = $3
RETURNING id, username, hash
`

type RehashUserParams struct {
	ID      int32  `json:"id"`
	NewHash []byte `json:"new_hash"`
	OldHash []byte `json:"old_hash"`
}

func (q *Queries) RehashUser(ctx context.Context, arg RehashUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, rehashUser, arg.ID, arg.NewHash, arg.OldHash)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Hash)
	return i, err
}
