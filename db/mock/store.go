// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PYTNAG/simpletodo/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/store.go github.com/PYTNAG/simpletodo/db/sqlc Store
//
// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	db "github.com/PYTNAG/simpletodo/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddList mocks base method.
func (m *MockStore) AddList(arg0 context.Context, arg1 db.AddListParams) (db.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddList", arg0, arg1)
	ret0, _ := ret[0].(db.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddList indicates an expected call of AddList.
func (mr *MockStoreMockRecorder) AddList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddList", reflect.TypeOf((*MockStore)(nil).AddList), arg0, arg1)
}

// AddTask mocks base method.
func (m *MockStore) AddTask(arg0 context.Context, arg1 db.AddTaskParams) (db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", arg0, arg1)
	ret0, _ := ret[0].(db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTask indicates an expected call of AddTask.
func (mr *MockStoreMockRecorder) AddTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockStore)(nil).AddTask), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(arg0 context.Context, arg1 db.CreateUserTxParams) (db.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), arg0, arg1)
}

// DeleteCheckedRootTasks mocks base method.
func (m *MockStore) DeleteCheckedRootTasks(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCheckedRootTasks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCheckedRootTasks indicates an expected call of DeleteCheckedRootTasks.
func (mr *MockStoreMockRecorder) DeleteCheckedRootTasks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCheckedRootTasks", reflect.TypeOf((*MockStore)(nil).DeleteCheckedRootTasks), arg0, arg1)
}

// DeleteList mocks base method.
func (m *MockStore) DeleteList(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteList indicates an expected call of DeleteList.
func (mr *MockStoreMockRecorder) DeleteList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteList", reflect.TypeOf((*MockStore)(nil).DeleteList), arg0, arg1)
}

// DeleteTask mocks base method.
func (m *MockStore) DeleteTask(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockStoreMockRecorder) DeleteTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockStore)(nil).DeleteTask), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int32) (db.DeleteUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(db.DeleteUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetChildTasks mocks base method.
func (m *MockStore) GetChildTasks(arg0 context.Context, arg1 sql.NullInt32) ([]db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildTasks", arg0, arg1)
	ret0, _ := ret[0].([]db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildTasks indicates an expected call of GetChildTasks.
func (mr *MockStoreMockRecorder) GetChildTasks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildTasks", reflect.TypeOf((*MockStore)(nil).GetChildTasks), arg0, arg1)
}

// GetLists mocks base method.
func (m *MockStore) GetLists(arg0 context.Context, arg1 int32) ([]db.GetListsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLists", arg0, arg1)
	ret0, _ := ret[0].([]db.GetListsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLists indicates an expected call of GetLists.
func (mr *MockStoreMockRecorder) GetLists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLists", reflect.TypeOf((*MockStore)(nil).GetLists), arg0, arg1)
}

// GetTasks mocks base method.
func (m *MockStore) GetTasks(arg0 context.Context, arg1 int32) ([]db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", arg0, arg1)
	ret0, _ := ret[0].([]db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockStoreMockRecorder) GetTasks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockStore)(nil).GetTasks), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// RehashUser mocks base method.
func (m *MockStore) RehashUser(arg0 context.Context, arg1 db.RehashUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RehashUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RehashUser indicates an expected call of RehashUser.
func (mr *MockStoreMockRecorder) RehashUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RehashUser", reflect.TypeOf((*MockStore)(nil).RehashUser), arg0, arg1)
}

// UpdateCheckTask mocks base method.
func (m *MockStore) UpdateCheckTask(arg0 context.Context, arg1 db.UpdateCheckTaskParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCheckTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCheckTask indicates an expected call of UpdateCheckTask.
func (mr *MockStoreMockRecorder) UpdateCheckTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCheckTask", reflect.TypeOf((*MockStore)(nil).UpdateCheckTask), arg0, arg1)
}

// UpdateTaskText mocks base method.
func (m *MockStore) UpdateTaskText(arg0 context.Context, arg1 db.UpdateTaskTextParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskText", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskText indicates an expected call of UpdateTaskText.
func (mr *MockStoreMockRecorder) UpdateTaskText(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskText", reflect.TypeOf((*MockStore)(nil).UpdateTaskText), arg0, arg1)
}
